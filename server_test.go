package main

import (
	"context"
	"go-grpc-example/mockdata"
	"go-grpc-example/proto"
	"testing"
)

func TestGetSingleUser(t *testing.T) {
	// mockdata is generated by calling GenerateData function
	mockdata.GenerateData()

	// to run tests parallelly
	t.Parallel()

	// server
	s := New()

	ctx := context.Background()

	// mock userIds to test
	userIds := []int64{1, 2, 3, 5, 4}

	// variable to test against empty response
	emptyResponse := &proto.ResponseUser{}

	// function is called for each user Id
	for _, v := range userIds {

		// request is created
		req := &proto.RequestUser{UserId: v}
		// function call is made
		response, err := s.GetSingleUser(ctx, req)
		// response is validated against multiple conditons
		if err != nil {
			t.Errorf(err.Error())

			// check for empty response
		} else if response == emptyResponse {
			t.Errorf("empty response")
		} else if response != emptyResponse {

			// check for individual parameters
			if response.Id == 0 {
				t.Errorf("ID missing")
			} else if response.City == emptyResponse.City {
				t.Errorf("city missing")
			} else if response.Fname == emptyResponse.Fname {
				t.Errorf("fname missing")
			} else if response.Height == emptyResponse.Height {
				t.Errorf("height missing")
			} else if response.Phone == emptyResponse.Phone {
				t.Errorf("phone number field missing")
			}
		}
	}

}

func TestMultipleleUser(t *testing.T) {
	// mockdata is generated by calling GenerateData function
	mockdata.GenerateData()

	// to run tests parallelly
	t.Parallel()

	// server
	s := New()

	ctx := context.Background()

	// mock userIds to test
	userIds := [][]int64{{1, 2, 3, 5, 4}, {3, 3, 4}, {4, 4, 3}}

	// variable to test against empty response
	emptyResponses := make([]*proto.ResponseUser, 1)
	emptyResponse := &proto.ResponseUsers{Users: emptyResponses}

	// function is called for each user Id
	for _, v := range userIds {

		// request is created
		req := &proto.RequestUsers{UserId: v}

		// function call is made
		response, err := s.GetMultipleUsers(ctx, req)

		// response is validated against multiple conditons
		if err != nil {
			t.Errorf(err.Error())
			// check for empty response
		} else if response == emptyResponse {
			t.Errorf("empty response")
		} else if response != emptyResponse {

			// individual parametes of response are validated
			for index := range v {

				// check for individual parameters
				if response.Users[index].Id == 0 {
					t.Errorf("ID missing")
				} else if response.Users[index].City == "" {
					t.Errorf("city missing")
				} else if response.Users[index].Fname == "" {
					t.Errorf("fname missing")
				} else if response.Users[index].Height == 0 {
					t.Errorf("height missing")
				} else if response.Users[index].Phone == 0 {
					t.Errorf("phone number field missing")
				}
			}
		}
	}
}
